import { typeDefs } from './graphql-schema'
import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import neo4j from 'neo4j-driver'
import { makeAugmentedSchema } from 'neo4j-graphql-js'
import dotenv from 'dotenv'
import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'
import fetch from 'node-fetch'
const { gql } = require('@apollo/client')

const bodyParser = require('body-parser')

// set environment variables from .env
dotenv.config()

const app = express()
const app1 = express()

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs,
  config: {
    query: {
      exclude: ['RatingCount'],
    },
    mutation: {
      exclude: ['RatingCount'],
    },
  },
})

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'neo4j'
  )
)

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: { driver, neo4jDatabase: process.env.NEO4J_DATABASE },
  schema: schema,
  introspection: true,
  playground: true,
})

// Specify host, port and path for GraphQL endpoint
const port = process.env.GRAPHQL_SERVER_PORT || 4001
const path = process.env.GRAPHQL_SERVER_PATH || '/graphql'
const host = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0'

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path })

var router = express.Router()

// Home page route.
router.get('/student', function (req, res) {
  console.log(req.body)
  res.send('student req')
})
const uri = `http://${host}:${port}${path}`

app.listen({ host, port, path }, () => {
  console.log(`GraphQL server ready at http://${host}:${port}${path}`)
})
const porty = 5000
const pathy = ''

app1.use(bodyParser.urlencoded({ extended: true }))
app1.use(express.json())
app1.listen(8000, () => {
  console.log(`GraphQL server ready at http://${host}:${porty}`)
  console.log(uri)
})
// Home page route.
app1.get('/', function (req, res) {
  console.log('selam', req.body)
  res.send('student req')
})
// Home page route.

app1.post('/student', function (req, res) {
  console.log('selam', req.body)
  let student = JSON.parse(JSON.stringify(req.body))
  console.log(student)

  dotenv.config()

  const {
    GRAPHQL_SERVER_HOST: host,
    GRAPHQL_SERVER_PORT: port,
    GRAPHQL_SERVER_PATH: path,
  } = process.env

  console.log(uri)
  const client = new ApolloClient({
    link: new HttpLink({ uri, fetch }),
  })

  let mutObject = gql`
    mutation AddStudent($Id: ID!, $Name: String, $Age: Int) {
      CreateStudent(name: $Name, id: $Id, age: $Age) {
        name
        age
        id
      }
    }
  `
  /**video izlemece mutate koduna bka c#da yapabilirmiyiz ona bak */

  client.mutate({ mutation: mutObject, variables: student }).catch((e) => {
    console.log(e.networkError.result)
  })

  res.send('student req')
})
